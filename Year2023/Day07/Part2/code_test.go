package y2023d07p02

import (
	"testing"
)

func TestHandTypeCalculator(t *testing.T) {
	tests := []struct {
		name string
		hand string
		want HandType
	}{
		{
			name: "Five of a Kind",
			hand: "AAAAA",
			want: FIVE_KIND,
		},
		{
			name: "Four of a Kind",
			hand: "AA8AA",
			want: FOUR_KIND,
		},
		{
			name: "Full House",
			hand: "23332",
			want: FULL_HOUSE,
		},
		{
			name: "Three of a kind",
			hand: "TTT98",
			want: THREE_KIND,
		},
		{
			name: "Two pair",
			hand: "23432",
			want: TWO_PAIR,
		},
		{
			name: "One pair",
			hand: "A23A4",
			want: ONE_PAIR,
		},
		{
			name: "High Card",
			hand: "23456",
			want: HIGH_CARD,
		},
		{
			name: "Joker Four of a Kind",
			hand: "T55J5",
			want: FOUR_KIND,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := HandTypeCalculator(tt.hand)

			if result != tt.want {
				t.Fatalf("Incorrect HandType. Received %+v, expected %+v", result, tt.want)
			}
		})
	}

}

func TestHandSorterFunc(t *testing.T) {
	tests := []struct {
		name  string
		hand1 HandBid
		hand2 HandBid
		want  int
	}{
		{
			name:  "Uses HandType to preserve order",
			hand1: HandBid{Hand: "22222"},
			hand2: HandBid{Hand: "3AAAA"},
			want:  -1,
		},
		{
			name:  "Uses HandType to switch order",
			hand1: HandBid{Hand: "3AAAA"},
			hand2: HandBid{Hand: "22222"},
			want:  1,
		},
		{
			name:  "Uses First card to preserve order",
			hand1: HandBid{Hand: "3AAAA"},
			hand2: HandBid{Hand: "2AAAA"},
			want:  -1,
		},
		{
			name:  "Uses First card to switch order",
			hand1: HandBid{Hand: "2AAAA"},
			hand2: HandBid{Hand: "3AAAA"},
			want:  1,
		},
		{
			name:  "Uses Last card to preserve order",
			hand1: HandBid{Hand: "AAAA3"},
			hand2: HandBid{Hand: "AAAA2"},
			want:  -1,
		},
		{
			name:  "Uses Last card to switch order",
			hand1: HandBid{Hand: "AAAA2"},
			hand2: HandBid{Hand: "AAAA3"},
			want:  1,
		},
		{
			name:  "Returns 0 when identical hands",
			hand1: HandBid{Hand: "AAAA2"},
			hand2: HandBid{Hand: "AAAA2"},
			want:  0,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := HandSorterFunc(tt.hand1, tt.hand2)
			if result != tt.want {
				t.Fatalf("Incorrect sorting result. Received %+v, expected %+v", result, tt.want)
			}
		})
	}

}

func TestCalculateExample(t *testing.T) {
	tests := []struct {
		name  string
		input string
		want  int
	}{
		{
			name:  "Example",
			input: "32T3K 765\nT55J5 684\nKK677 28\nKTJJT 220\nQQQJA 483",
			want:  5905,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := Calculate(tt.input)

			if result != tt.want {
				t.Fatalf("Receieved %d, expected %d", result, tt.want)
			}
		})
	}

}

func TestCalculateInput(t *testing.T) {
	tests := []struct {
		name  string
		input string
		want  int
	}{
		{
			name:  "Input",
			input: "T6782 898\n26T7A 345\n56856 92\n88J88 379\n8QQJ8 792\nQQQT8 607\n98998 912\n888T7 491\n7A6Q9 220\n6QJ23 746\nT5297 133\n44874 357\n84854 864\n8JQQ2 383\nJ2KT2 649\n84488 234\nJQ4QT 534\nJJAAA 855\n8J49Q 458\n5QK4A 474\n5535T 504\nT3785 237\n28J88 315\n4544A 680\n7T773 731\nKJKKK 190\n5Q5QK 249\n6664T 747\nQTQQT 164\nATTAA 290\n95752 486\nJ3JAA 324\nK9K9J 204\n99959 867\nK4KKK 980\nA937J 37\n654A9 700\n7553K 352\n8333K 361\nATJT8 771\n26226 940\nTTJ7Q 834\nQQ33J 117\n62J57 890\nJ3A4A 124\nT4JT4 677\n93528 31\nTJA2J 509\nQ222A 126\n52T67 177\n3J9TT 629\n33QQ3 471\n22232 9\n82279 283\n3A3AJ 583\n7343T 829\n93338 836\nT588Q 70\n88K85 593\n55353 926\nQ3749 295\nT6JAK 586\n9AA3J 183\n55565 342\n8K4Q8 910\nAA4A4 907\n78T2A 112\n4J66K 263\nTKJTT 386\n66Q6Q 131\n26266 187\n23AQ3 600\n95K3Q 279\n32522 684\n8Q8Q7 62\nKKAKK 579\nQJ885 899\n66J2K 396\n555J5 592\n88TJ6 767\n352K2 94\nJ6488 634\n5A32J 943\nAAAKA 673\nJ8AAA 667\n2K5JK 768\nQ4578 294\n4447K 227\nQQQQ7 808\nJJ333 176\n49586 515\n622T7 622\n94359 140\n8QJ2A 239\nQ69JT 939\nA75T9 425\nJKA93 887\nAA7AA 157\nTTTJ5 122\nJ2J3J 118\n3J333 681\n3769A 429\nA2K92 123\n53Q8K 257\nA83K4 905\n2935K 543\n66466 421\n34394 963\nQQ433 520\nKTKKK 83\n66677 346\nQ83JQ 334\n6AT54 79\nK4949 442\n37374 627\n73777 571\nJQKKJ 648\n42242 226\nKK888 319\n5K6Q2 971\nAA3JA 51\n4AK87 78\n3J343 840\nK3333 25\n33484 401\n9J866 565\nQ399Q 116\n2K597 742\n66A53 793\nAQQAQ 779\nQ3QJJ 470\n75496 4\n8JJT3 775\n99JKJ 437\n22J9J 60\n39AAT 424\n3J43J 507\n33TJ9 414\n99395 209\nA984Q 821\nA88J8 757\nT3A68 432\n36666 646\nKKKAA 175\nK9TTK 392\n33KK5 308\nKK4K4 675\n64443 370\nTQJ9Q 645\nQT999 669\nJ5T88 789\n89TJ4 245\nT436T 605\n6T464 36\nJQQ3Q 11\n68666 423\nKKJKT 785\nT4K3A 847\n6T6JT 915\n8Q756 163\n9AAA2 343\n9AJK8 556\n3JJ69 154\n7K7K3 316\n6737Q 641\n88J7J 975\n5J445 270\nKATJT 659\n6J866 717\n989T9 529\n2897K 321\n4A2T5 984\n7AA99 485\nJK222 397\n75468 282\nQT3J3 91\n3K777 532\n6Q566 460\n2KK75 339\n55258 766\n88558 46\n34J34 419\nT42A8 624\n6JA9K 950\nA8646 135\n66696 66\n37Q7Q 612\nKJAK6 753\n94999 306\n2JJJJ 765\n6JQ3A 459\nK8693 871\n477K7 26\n4T6T8 544\n44JK4 720\n5K5K9 372\nKQ66Q 590\n8A294 57\nJJJJJ 440\n88878 18\nJ9649 389\n77677 698\n9K69J 145\n2QT2K 75\n77577 22\nAQ4KA 422\n97477 332\n33933 882\n63646 293\n53A3A 763\n4K93K 928\nKKK37 994\nTA259 173\nK896A 93\n6Q666 438\nJ8477 674\nAJAQQ 531\n2JJ2J 726\n5KJT5 672\nA58A2 481\nJJAJT 754\n96444 179\n687A5 528\nTA48J 618\n7Q7Q7 537\nT4A44 23\n473Q6 988\nKQ467 64\n5T555 938\n67T33 444\nKAK99 591\nA6K78 160\n23Q7A 878\nTA5AT 292\n2T6Q5 559\n77979 222\n9AAJA 284\nTK47T 166\n694T2 679\nAAA23 838\n88KJK 170\nQJQ2Q 777\n84486 178\n535JQ 411\nJ547T 595\n37773 602\n777JQ 188\n48989 825\n4944K 492\nJ8959 375\n72Q5A 908\nQ2AAT 280\nQ3666 119\n48J24 238\n999JA 865\nKK9KK 831\n6Q3JT 909\n3A773 50\n38466 461\n37A25 300\n95555 307\n7Q228 557\nKQ66K 525\n8744K 727\nJ9JQ9 475\nA5AKA 148\nA7KJT 309\nTT794 539\n53339 762\nQ9999 6\nA4AT4 993\n888AA 790\n6666A 480\n88Q63 274\n99J92 869\nJ8988 884\n8K68J 839\n7QA72 498\n84697 581\n3QK3J 289\n59J8A 692\nQ5J5Q 761\nJ777K 930\nT552K 251\nTAT26 715\n6J32T 380\n74K28 523\n22279 104\n8TKT2 393\n68J67 391\n55458 340\n5TK47 395\n822J8 893\nT9388 902\n8TQ3Q 252\n3T549 811\n88883 702\n55J2K 81\n4QTT4 138\n69669 272\nKTKTK 576\nT6668 822\n7J777 736\n9ATJT 892\nQ5QQQ 125\n66T9T 519\n4T244 589\n77747 174\n3J698 837\n39K28 665\nQA459 456\n22342 545\nJ8478 489\nQ2962 468\nQAAAA 958\nK8T87 260\nJ4KK7 706\nJ5J95 695\n47445 724\nK268T 967\n33299 652\nKKKK2 664\nK9JKA 711\n85926 435\nJ7K6J 511\n3667J 791\n229QA 633\n998K7 642\n8QQ77 774\n6347A 497\n46526 327\nQK327 750\nKAQ25 927\n27T34 134\nT633T 208\nKKQK7 810\n223J2 900\n5KKJ5 842\n99533 521\nA5Q85 553\n54455 570\nJA946 582\n69Q66 690\n99977 701\n282Q8 428\n4AA42 10\n75977 328\n99T99 948\nJ5353 546\nQT95K 285\nKKK3K 896\n9696J 264\nT8275 436\n45J55 80\n69AAA 430\n27J4J 202\n6A888 404\nTQ5K8 819\n55858 113\nT828T 933\nT8888 12\n3KKKT 703\n657J6 291\n8699J 172\n9J99T 705\nA22A2 229\n32263 314\n8QQQQ 101\n2J222 354\n73373 107\n99398 946\n2AA2J 885\nT66J6 184\n3K8K8 903\nKJJKK 611\n22226 781\n9A2J9 191\nAK26J 964\n8KK2Q 317\n82898 883\nT9TTT 195\n584JT 743\n4AA45 61\n93J79 100\n3QJAK 241\nT74AQ 304\n4Q2QQ 548\nKKJ27 330\nA9TKK 39\n6J447 303\n592A6 449\nK9928 65\n9A94K 193\n8T646 431\nQ46K3 20\nK5777 833\nQ9756 30\n33838 638\n65686 298\nA9JAJ 599\n85555 784\n6TAA4 286\n3QQ89 446\n3JT37 463\n8AK5Q 230\n7JAAQ 580\n754TQ 74\n9AQQ4 729\n2933J 678\n62757 575\n29929 619\nA3AAA 216\nQ557Q 691\nA7Q8T 983\n3TJQT 668\nA3KJA 503\n7AA77 881\n88288 995\n7QJ3J 770\n5KKJK 265\n444J4 998\n82J87 89\nT3T3J 63\n2QQ76 510\n5QQ25 132\nKKKT5 441\nQ822Q 954\n84858 788\n37627 873\n22959 426\nK6KKJ 454\n4J844 359\n67JQ7 266\nTQ7T2 206\n5QT2J 854\nKK985 42\n3562T 877\n44343 999\n5J595 859\n37888 657\nJ65AK 801\n77276 382\n22A22 207\nQQ4K3 253\n9K2K4 161\n888Q8 863\n75J77 518\nK2K2K 150\n2JT62 398\nJ3993 719\nAA88A 813\n9499T 211\nA568Q 98\n6KQ6J 962\nQAKA8 367\n998A9 561\nJ2357 196\nA797T 663\n6J9J6 505\n2T5T2 759\nK6464 381\n76677 373\n4K92J 33\n5A8JK 447\n8QQ88 660\n3298A 325\n37333 802\nJTQQT 7\nQQQ3A 820\nJ5935 506\nK4334 2\nKA749 40\n94QQ9 415\n537KK 225\n25255 913\n835J9 601\n55TTT 647\n92J92 710\n66A6A 312\nA8TT8 914\n4KJKK 271\nT3242 835\n3K636 623\n93T5A 365\nJ4739 816\n244A5 465\nA9TT5 560\n2JAA9 224\nTTT7T 356\nAQQAA 656\nQT5Q5 879\n7AA7J 632\n36344 127\nK5T89 243\n797A9 562\n66363 52\n68585 598\nKQ8A9 608\n999K2 21\n52253 151\nA5595 262\nKTTTT 366\n2922T 1000\n25328 815\n3T7T7 806\nQ2Q39 895\n3J432 786\nJA228 782\nAJJ99 621\n8AAQQ 809\n97QAT 143\n456J8 15\nAAJ2A 165\nJ55J5 281\nK6945 322\n22A2J 799\n77AAA 666\nQ6J66 168\n7QTJ5 363\nQ38T2 709\nAKT86 936\nQQQQK 585\nJA4J4 130\nAJA73 796\n88QQQ 828\nQQ2Q2 390\nKK77K 301\nA5TQ9 805\n96677 477\nJ7495 628\n24222 807\n8QQ83 992\n222K6 861\n949J5 473\n59873 555\n9K584 564\nAAQ7Q 989\n62J2K 445\n4732A 420\n2JT9K 136\nTT989 277\nJJ999 549\nQ9T6K 513\n36J6A 97\nA3J32 986\n8A7TJ 682\nT2784 59\nKJAAK 110\n8KJ88 919\nAKK77 256\n2J876 713\nK3TQ7 115\n8Q6AT 973\n45666 19\n33335 400\nJ43K4 851\nA22A9 974\n8Q867 574\n993KA 185\n9K8Q4 464\n5AAAA 949\n27JJ5 686\n3TTT3 606\nT4444 533\nK8838 830\n75682 960\nJ89JT 129\n45A5A 886\nKKK6T 416\nAJA6A 626\nAAJKA 182\nAA2A8 73\n7JK88 640\nJJ222 462\n4A455 49\n7JAKQ 812\nAAAA9 387\n777T7 769\n37K2A 348\nQTJ77 355\nKQQKA 500\nQQQ9Q 350\n65666 111\nT7TT7 407\n333TJ 214\n78876 8\n8Q478 409\n8K3AT 934\n6A583 814\nJTJAA 826\n3A373 278\nJ4J44 171\n9AAA3 374\n32J32 199\n76TTA 858\n27222 305\n862K6 369\nQJKAA 568\nJK94J 524\nQ6QQ6 852\n2TQ22 987\nJ6AJ7 385\n73A6T 106\nQAKQT 925\n2424T 737\nT7ATA 620\nT8A47 613\nJ2858 636\nK7373 484\n7QK65 716\nK8QKK 981\n52454 443\nAAAAJ 738\n99J99 69\n6AQJ8 439\n774J9 798\n66JJ6 210\nTTQTQ 35\n7QJ97 694\nQJQQJ 918\n9K999 573\nQ7TT7 68\n46887 704\nT6379 661\n34888 326\n9A999 916\n6466J 849\n666J6 479\nQKKKK 247\n46K48 336\nJ6729 467\nA22A6 269\n6KQKK 584\n68J86 961\n8KK87 670\n52656 542\nQ4AJ3 394\n79KJK 77\nQ8965 139\n44474 240\nQJQQQ 434\nAQ449 921\n57A9J 996\nJ5835 817\nQQKK3 818\n3943J 13\n4T7A5 956\n44464 517\n5A55J 48\n2J254 722\n9JAT5 487\nQ4757 856\n5Q55A 749\nATKJ5 82\nJ8588 142\n646TQ 783\n38J39 922\n26J77 823\n2TT4T 162\n6666K 137\nQQQ83 758\n32KJT 733\n4J9K8 353\nKQJT7 501\n6T6TK 982\nQ42K9 147\n8734Q 538\nKKA67 794\nJQKKA 804\nQQ555 596\n4JJ45 32\n28383 904\nT5Q45 38\n5T5TJ 221\nQ3K9A 29\n99649 1\n94247 146\n4Q444 362\n5637T 734\n577TT 735\nTT244 364\n56QQQ 149\nK2AQ3 144\n9J959 493\n66Q44 405\n888K8 654\n6J624 635\n9QJKA 569\nK8K5K 120\n24443 344\n6666T 197\n6T747 740\n54523 935\nA96Q2 302\nAJJJA 697\n2T476 90\n55444 403\nQJ22Q 85\nKK9KJ 254\n4938T 156\n5JT8J 741\nQ55K3 527\n627JK 894\nT6245 917\n44864 410\n77QJ3 587\n823A4 457\n32323 259\n9T94T 609\n33J8K 158\n7AK4K 201\n44774 957\n4Q45T 180\nJA82K 978\n333J5 872\nJ8948 267\n99933 433\n4T7JJ 563\n85534 862\nK7K8K 24\nJTTKK 824\nTQ8TT 803\n62677 797\nQQATT 965\nQQ668 870\n88724 551\nT3T43 17\n99749 275\n7T6J2 977\n67J77 203\n6T789 167\n22J28 639\n26744 850\nQQQ6Q 47\nQA72T 554\n3AT9T 897\nQJTQ2 261\n696JQ 631\n9KKQJ 490\n469T8 72\nQAT42 951\nAJ2AK 413\n8AQ2T 297\nAJ482 255\nQQQKK 931\nAJA7A 874\n34532 368\n74A44 945\n88989 418\nA2AAA 219\n39999 857\nJ7774 687\nQ9925 630\n9JQ9Q 578\n8AA38 689\n8QA2A 427\nQ6Q99 800\nTTTTJ 399\nAA822 614\nATT47 676\nK2AAA 514\n7J696 338\nJ3J87 88\n55547 728\n5A338 86\n838T6 250\n87QAK 970\n795K7 723\n7QTJ6 152\n5A9KQ 494\nKA4TK 650\nQ2222 604\nK5953 452\nK2282 552\n4K586 760\nK4444 868\n724AA 516\n52224 55\n35Q33 58\n46644 331\nT8325 888\n9K229 388\n779TT 920\n97279 95\nJJ374 450\n8JJJJ 610\n84497 217\n8QK4J 233\nKQ6T6 360\n6637Q 53\nKK7QJ 683\n4828A 215\n5TT55 990\nJ3768 536\nATKTK 846\n5T9K4 780\n2T8AT 502\n7T776 712\nKQ93Q 114\n2474J 483\nQQQ46 408\nJ5T82 718\n834A9 688\nJT977 615\n69663 296\n4A638 880\nQQQA7 27\n2K22K 377\n29379 972\n244J4 242\nK8KKK 56\nKTQKJ 891\n87K5J 730\n887AA 699\n9QJQA 725\n6J655 929\n8692A 844\n2QQQQ 194\nTJ79Q 969\nJATA9 128\n8448J 103\n9399J 953\n98J77 371\nTT3J5 192\nJ3655 924\n6993K 616\nJ8788 979\nK9KK3 756\n57AQ4 671\n88KQ7 955\n6AAA6 843\n9494J 105\n6A2QQ 942\nT222T 87\nJ9JA5 244\nAKA4A 198\nQ4635 558\n2332T 889\nAKQQ5 827\n97QQQ 337\nJT575 603\n36336 478\n4A43T 653\n5QQ38 349\n97777 776\nTQ6TT 541\n57775 258\n68KKK 469\n92224 121\n4853Q 476\n2Q695 273\n2J626 732\n6A328 246\n5QT27 959\nKJJ77 658\n4K6KK 310\nJAK66 28\nQQK4K 16\nK4923 752\n57555 482\n46T5T 550\n333Q3 496\n2Q93J 755\n778J3 751\nK77KJ 276\n76A96 947\nQTT7T 335\n4T9K6 997\n26926 512\n66464 522\n59997 787\nK462A 508\nK4K7K 333\nQ3Q3Q 707\nA3TKK 772\n7T7J7 44\nTAK54 455\n44JKQ 287\nTQK49 748\n37335 577\nQ743J 200\nQ4A45 236\nKJ62K 288\n544K5 76\nTTTJJ 693\n89999 96\nK8JKK 351\n5JAT8 778\nTAAJT 67\n39339 911\n997K6 329\n5JK88 876\n338QQ 530\n88889 937\n884T8 526\n382QA 320\n86Q35 764\nKQ38A 412\nAA7A8 358\n22Q2K 637\nA22JK 248\n59855 906\n33AJ3 347\n42T2Q 108\nAQ2T6 99\n8KATJ 651\n9JQTT 832\n84847 451\n52K8K 453\nK6553 54\n87778 499\nTAAJA 223\n38298 643\n5557Q 841\n9K6K9 448\n77J73 617\n555K5 976\nA38T4 968\n3333A 472\n5KJ74 866\n7JJ8K 708\nJ55Q5 714\n58KA4 795\nAAAA4 488\nQ8QQ7 45\n58A55 311\n27T7T 3\n2J4KA 43\nTT3T9 159\n475K6 109\n48844 323\n4T2T2 186\nQ7A7J 218\nJTJA6 744\nJ96J4 721\n8TT88 41\nQ5T96 417\nQTA6T 213\n68A33 169\nJ3TT8 34\n44JK8 14\n29983 540\n3666J 845\n436J2 685\n88A88 597\n889J9 313\n77754 848\n2TA99 406\n5KK5K 535\n3KJ75 547\n67666 662\n9T634 231\nQTQQQ 299\nJ993T 745\n87Q98 155\nAAAKQ 376\n36Q43 696\n67K67 952\n25Q47 739\n44424 228\nK22JQ 941\n5434Q 232\n8AA6Q 5\n58J55 625\n37535 153\n66868 572\n87788 384\nJ5993 860\nK42K4 402\n59Q7T 944\nJ2475 495\nKKKK7 773\n9K5Q2 341\n9AQAQ 594\nT5974 181\n42442 901\nT6TTT 932\n25895 268\n44484 212\n88J63 588\n22777 102\nQ7K77 991\nQK9K9 235\nJ4544 205\n7K523 985\nT4246 566\n9TQ3A 466\n884JT 644\n59995 84\n7772J 853\nJJ882 318\n25522 923\nTTT9J 189\n23333 378\n58J85 141\n7K45K 567\nJJ777 71\n74A47 875\n2J848 655\n93K65 966",
			want:  248747492,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := Calculate(tt.input)

			if result != tt.want {
				t.Fatalf("Receieved %d, expected %d", result, tt.want)
			}
		})
	}

}
